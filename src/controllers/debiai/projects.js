// ===== Projects routes =====

// For DebiAI, a project is composed of:
// - A name
// - A structure (columns and expected results)
// - A list of data ids
// - Some data for each data id
// - A list of selections (optional)
// - A list of models (optional)

// This file contains the routes to manage the projects:
// - Get the list of projects
// - Get a single project (project name, columns and expected results)
// - Get a project data ids
// - Get the project data from a list of data ids
// - Delete a project (optional)

exports.getProjectsOverview = async (req, res) => {
  // Return the list of projects with their names and values their numbers of samples, selections and models
  try {
    const projects = {
      project_1: {
        name: "Web data-provider project",
        nbSamples: 10,
        nbSelections: 2,
        nbModels: 1,
        creationDate: 1697814247211,
        updateDate: 1707914347211,
      },
    };

    res.status(200).send(projects);
  } catch (error) {
    console.log(error);
    res.status(500).send(error);
  }
};

exports.getProject = async (req, res) => {
  try {
    /*
          Return a single project with his columns and results 
      */
    const projectId = req.openapi.pathParams.projectId;

    // Project value will be the column and expected results for the project
    const projectValue = {
      name: "Project 1",
      columns: [
        // No need to add the "id" column, it will be added automatically
        { name: "Context 1", category: "context", type: "text" },
        { name: "Context 2", category: "context", type: "list" },
        { name: "Context 3", category: "context", type: "dict" },
        { name: "Ground truth 1", category: "groundtruth", type: "number" },
        { name: "Input 1", category: "input" }, // type is not required, it will be detected automatically
        { name: "Other col", group: "My group" }, // Category is not required, it will be set to "other" by default
        // You can also add a group to your columns, it will be used to group the columns in the interface

        // category can be : context, groundtruth, input, other. Default category is other
        // Type can be : auto, text, number, and boolean. Default type is auto
      ],
      expectedResults: [
        { name: "Model prediction", type: "number" },
        { name: "Model error", type: "number", group: "Errors" },
        // The expected results are the columns that are used to provide information about the model predictions
        // For example, you can add the model predictions and some metrics like the model errors
        // You can also group the expected results in the interface with the group property
      ],
      nbSamples: 10,
      creationDate: 1697814247211,
      updateDate: 1707914347211,
    };

    // To set name, columns and expected results to the variable we send to Debiai
    if (projectId == "project_1") {
      res.status(200).send(projectValue);
    } else {
      res.status(404).send("Can't find project " + projectId);
    }
  } catch (error) {
    console.log(error);
    res.status(500).send(error);
  }
};

exports.dataIdList = async (req, res) => {
  // Return the list of the project data ids
  try {
    const requestedProjectId = req.openapi.pathParams.projectId;

    if (requestedProjectId !== "project_1")
      res.status(404).send("Can't find project " + requestedProjectId);

    // DebiAI provide information about the analysis to help manage the data requests
    const analysis = {
      id: req.query.analysisId,
      start: req.query.analysisStart,
      end: req.query.analysisEnd,
    };

    // The analysis object contains the following properties:
    // - id : Generated by DebiAI, it can be used to identify the analysis
    // - start : A boolean to know if it's the first request for this analysis
    // - end : A boolean to know if it's the last request for this analysis

    // We gather the data ids from the database
    const projectDataIds = [1, 2, 3];
    // The id of the data are 1, 2, 3, they will used by DebiAI to request the data
    // They can be in any format, but please avoid characters like : / ( ) < > . ; or ,

    // In case of a number of sample > maxSampleIdByRequest, we will ask for a sequenced amount of sample ID
    // Set variables only if from & to in query parameters*
    const from = req.query.from;
    const to = req.query.to;

    if (from !== undefined && to !== undefined) {
      // Fetch data with from and to filter;
      // Add + 1 because slice function excluded last value
      res.status(200).send(projectDataIds.slice(from, to + 1));
    } else {
      res.status(200).send(projectDataIds);
    }
  } catch (error) {
    console.log(error);
    res.status(500).send(error);
  }
};

exports.data = (req, res) => {
  // Return the data for the given data ids
  try {
    const requestedProjectId = req.openapi.pathParams.projectId;
    const requestedDataIds = req.body; // List of data ids requested by DebiAI

    if (requestedProjectId !== "project_1")
      res.status(404).send("Can't find project " + requestedProjectId);

    // DebiAI provide information about the analysis to help manage the data requests
    const analysis = {
      id: req.query.analysisId,
      start: req.query.analysisStart,
      end: req.query.analysisEnd,
    };

    // If the requested ids are [1, 2, 3], the following data will be returned:
    const projectData = {
      1: [
        "Context a",
        [18, 9, 7, 9],
        { tags: ["c"], sub_context: {} },
        11,
        4,
        false,
      ],
      2: [
        "Context b",
        [20, 2, 7, 9],
        { tags: ["a", "b", "c"], sub_context: {} },
        23,
        2,
        true,
      ],
      3: [
        "Context c",
        [19, 10, 8, 3],
        { tags: ["a", "c"], sub_context: {} },
        -2,
        0,
        true,
      ],
    };

    // The object keys are the data ids and the object values are the data
    // The data array MUST follow the columns order defined in the project info
    // Data containing '', null or undefined aren't supported by DebiAI at the moment
    // Data in a array or objects format are supported since the DebiAI unfolding update

    const dataToReturn = {};
    requestedDataIds.forEach((id) => {
      dataToReturn[id] = projectData[id];
    });

    res.status(200).send(dataToReturn);
  } catch (error) {
    console.log(error);
    res.status(500).send(error);
  }
};

exports.deleteProject = async (req, res) => {
  // Delete a project
  // This route will be called when the user click on the delete button in the project page
  // If the data provider is not designed to support deletion, throw an error
  // To prevent deletion, you can set the "canDelete.projects" to false in the debiai/info route

  const requestedProjectId = req.openapi.pathParams.projectId;
  // Delete the project or don't if you don't want to
  res.status(404).send("Not implemented");
};
